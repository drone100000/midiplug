/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "SquareLookAndFeel.h"

Array<PropertyComponent*> addItems(PkrSliderPropertyComponent* comp)
{
    Array<PropertyComponent*> comps;
    comps.add(comp);
    return comps;
}

Array<PropertyComponent*> addControlChangeItems(PkrSliderPropertyComponent* sliderComp)
{
    Array<PropertyComponent*> comps;
    comps.add (new TextPropertyComponent (Value (""), "Label", 200, false));
    // comps.add(new PkrSliderPropertyComponent("Number", 0, 127, 1));
    comps.add(sliderComp);
    return comps;
}

void MidiplugAudioProcessorEditor::setupSquareLookAndFeelColors (LookAndFeel& laf)
{
    const Colour baseColour (Colours::red);
    laf.setColour (Slider::thumbColourId, Colour::greyLevel (0.95f));
    //Text box outline
    laf.setColour (Slider::textBoxOutlineColourId, Colours::white);
    //Slider fill/pointer
    laf.setColour (Slider::rotarySliderFillColourId, baseColour);
    //Slider outline
    laf.setColour (Slider::rotarySliderOutlineColourId, Colours::black);
    laf.setColour (Slider::trackColourId, Colours::black);

    //Increment/decrement buttons
    laf.setColour (TextButton::buttonColourId, Colours::white);
    laf.setColour (TextButton::textColourOffId, baseColour);

    laf.setColour (TextButton::buttonOnColourId, laf.findColour (TextButton::textColourOffId));
    laf.setColour (TextButton::textColourOnId, laf.findColour (TextButton::buttonColourId));
}

//==============================================================================
MidiplugAudioProcessorEditor::MidiplugAudioProcessorEditor (MidiplugAudioProcessor& owner)
    : AudioProcessorEditor (owner),
    _channelSliderComponent(new PkrSliderPropertyComponent("Channel", 0, 15, 1)),
    _programSliderComponent(new PkrSliderPropertyComponent("Program", 0, 127, 1))

{
    _channelSliderComponent->getSlider()->addListener(this);
    _programSliderComponent->getSlider()->addListener(this);

    // This is where our plugin's editor size is set.
    setSize (400, 300);

    addAndMakeVisible(panel);

    panel.addSection("MIDI Channel", addItems(_channelSliderComponent));
    panel.addSection("Program Change", addItems(_programSliderComponent));
    for (int i=0; i<128; ++i) {
        PkrSliderPropertyComponent* sliderComponenet = new PkrSliderPropertyComponent("CC-" + std::to_string(i), 0, 127, 1);

        _ccSliders.insert(std::pair<Slider*, int>(sliderComponenet->getSlider(), _ccSliders.size()));

        sliderComponenet->getSlider()->addListener(this);
        panel.addSection("Control Change", addControlChangeItems(sliderComponenet));
    }

    SquareLookAndFeel* slaf = new SquareLookAndFeel();
    setupSquareLookAndFeelColors(*slaf);
    setLookAndFeel(slaf);

    startTimer(50);

}

MidiplugAudioProcessorEditor::~MidiplugAudioProcessorEditor()
{
}

//this is taken from JuceDemoPlugin
void MidiplugAudioProcessorEditor::resized()
{
    //channelSlider.setBounds (120, 10, 150, 20);
    //valueSlider.setBounds (120, 35, 150, 40);
    /*pc.setBounds(10, 10, 380, 60);
    for (int i=0; i<cc.size(); ++i) {
        cc[i]->setBounds(10, 75+(i*65), 380, 60);
    }*/

    panel.setBounds(0, 0, 400, 300);

    /*
    resizer->setBounds (getWidth() - 16, getHeight() - 16, 16, 16);

    getProcessor().lastUIWidth = getWidth();
    getProcessor().lastUIHeight = getHeight();
     */
}

//this is from JuceDemoPlugin
void MidiplugAudioProcessorEditor::timerCallback()
{
    MidiplugAudioProcessor& p = getProcessor();


    _channelSliderComponent->getSlider()->setValue(p.getMIDIParameter(p.channelParam), NotificationType::dontSendNotification);
    _programSliderComponent->getSlider()->setValue(p.getMIDIParameter(p.programParam), NotificationType::dontSendNotification);

    for (std::map<Slider*,int>::iterator it=_ccSliders.begin(); it!=_ccSliders.end(); ++it){
        int paramId = p.numDefaultParams + it->second;
        it->first->setValue(p.getMIDIParameter(paramId), NotificationType::dontSendNotification);
    }

}

// This is our Slider::Listener callback, when the user drags a slider.
// Taken from the JuceDemoPlugin
void MidiplugAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    MidiplugAudioProcessor& p = getProcessor();

    if(slider == _channelSliderComponent->getSlider())
        p.setMIDIParameter(p.channelParam, slider->getValue());

    if(slider == _programSliderComponent->getSlider())
        p.setMIDIParameter(p.programParam, slider->getValue());

    if(_ccSliders.count(slider) == 1){
        int paramId = p.numDefaultParams + _ccSliders.at(slider);
        p.setMIDIParameter(paramId, slider->getValue());

    }

}


//==============================================================================
void MidiplugAudioProcessorEditor::paint (Graphics& g)
{
    g.setGradientFill (ColourGradient (Colours::grey, 0, 0,
                                       Colours::black, 0, (float) getHeight(), false));
    g.fillAll();
    g.setColour (Colours::black);
}
