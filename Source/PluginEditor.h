/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef PLUGINEDITOR_H_INCLUDED
#define PLUGINEDITOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"
#include "PkrSliderPropertyComponent.h"
#include <map>

//==============================================================================
/**
*/
class MidiplugAudioProcessorEditor  : public AudioProcessorEditor,
                                      public SliderListener,
                                      public Timer
{
    PkrSliderPropertyComponent* _channelSliderComponent;
    PkrSliderPropertyComponent* _programSliderComponent;
    std::map<Slider*, int> _ccSliders;

public:
    MidiplugAudioProcessorEditor (MidiplugAudioProcessor&);
    ~MidiplugAudioProcessorEditor();
    void timerCallback() override;
    void resized() override;
    void sliderValueChanged(Slider* slider) override;

    //==============================================================================
    // This is just a standard Juce paint method...
    void paint (Graphics& g) override;
private:
    ScopedPointer<ResizableCornerComponent> resizer;
    ComponentBoundsConstrainer resizeLimits;
    void setupSquareLookAndFeelColors (LookAndFeel& laf);
    PropertyPanel panel;

    MidiplugAudioProcessor& getProcessor() const
    {
        return static_cast<MidiplugAudioProcessor&> (processor);
    }

};


#endif  // PLUGINEDITOR_H_INCLUDED
